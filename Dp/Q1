---------------------------------------------------------------------------------------------------------------------------------------------------------------
| Feature         | Top-Down (Memoization)                | Bottom-Up (Tabulation)                 |
| --------------- | ------------------------------------- | -------------------------------------- |
| Approach        | Recursion + cache                     | Iterative + table                      |
| Execution Order | On-demand (depends on recursion path) | Fixed order (predefined loop sequence) |
| Space Usage     | O(n) for memo + recursion stack       | O(n) for table (stack not needed)      |
| Ease of Writing | Often more intuitive                  | Requires dependency planning           |

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
//509.Fibonacci Number

class Solution {
public:
    int solve(int n, vector<int>& dp) {
        if (n <= 1) {
            return n;
        }
        if (dp[n] != -1) { // checking weather it is equal to -1
            return dp[n];
        }
        return dp[n] = solve(n - 1, dp) + solve(n - 2, dp);
    }

    int fib(int n) {

        if (n <= 1) // Base case
        {
            return n;
        }

        // used dp vector for memorization in one dimension as only one variable
        // taking n+1 maximum size and initializing with -1.
        // using memorization to abvoid the calculation of repeatiing sub-problem.
        // By recursion time complexity is exponential 2^n which is not good for large test case so we use memorization.

        
        vector<int> dp(n + 1, -1);

        return solve(n, dp);
    }
};

------------------------------------------------------------------------------------------------------------------------------------------------------------------
// BOTTOM UP APPROACH
class Solution {
public:
    int fib(int n) {


if(n<=1)
{
    return n;

}

vector<int> dp(n+1,-1);

dp[0]=0;
dp[1]=1;

for(int i=2;i<=n;i++)
{
    dp[i]=dp[i-1]+dp[i-2];
}
return dp[n];

        
    }
};
-------------------------------------------------------------------------------------------------------------------------------------------------------------------












